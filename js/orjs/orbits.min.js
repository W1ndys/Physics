(function() {
    var orb, Renderer, Physics, UI, Sat;
    var sats = [], earth, debug;

    // orb模块，用于初始化系统并设置地球质量
    (function() {
        orb = function(opts) {
            earth = opts.settings.earth;  // 获取地球的设置
            orb.setEarthMass(earth.m);  // 设置地球质量
            orb.UI = UI(opts.ui);  // 初始化UI模块
            orb.Renderer = Renderer(opts.renderer);  // 初始化Renderer模块
            orb.Physics = Physics(opts.physics);  // 初始化Physics模块
            debug = document.getElementById("DEBUG");  // 获取调试元素
            return orb;
        };

        orb.setEarthMass = function(mass) {
            earth.m = mass * 1E11; // 设置地球质量，乘以1E11进行放大
        };
    })();

    // Renderer模块，用于绘制地球和卫星
    (function() {
        var ctx, earthImg, earthImgLoaded = false;

        Renderer = function(opts) {
            ctx = UI.canvas.getContext("2d");  // 获取画布上下文
            earthImg = new Image();  // 加载地球图像
            earthImg.src = opts.earthimg;
            earthImg.onload = function() {
                earthImgLoaded = true;  // 地球图像加载完成
            };
            return Renderer;
        };

        Renderer.redraw = function() {
            ctx.clearRect(0, 0, UI.canvas.width, UI.canvas.height);  // 清空画布
            for (var i = 0; i < sats.length; i++) {
                sats[i].draw();  // 绘制每个卫星
            }
            if (!earthImgLoaded) {
                drawCircle({
                    x: earth.x,
                    y: earth.y,
                    radius: earth.r,
                    strokeStyle: "#00FF00",
                    fillStyle: "#00FF00"
                });
            } else {
                ctx.drawImage(earthImg, earth.x - earthImg.width / 2, earth.y - earthImg.height / 2);  // 绘制地球图像
            }
        };

        Renderer.drawSatellite = function(opts) {
            var xpoints = opts.xpoints;
            var ypoints = opts.ypoints;
            var color = opts.color;  // 轨迹颜色

            if (xpoints.length > 1) {
                ctx.beginPath();
                ctx.moveTo(xpoints[0], ypoints[0]);  // 移动到第一个点

                // 连接所有轨迹点
                for (var i = 1; i < xpoints.length; i++) {
                    ctx.lineTo(xpoints[i], ypoints[i]);
                }

                ctx.strokeStyle = color || "#FFFFFF";  // 设置轨迹颜色
                ctx.lineWidth = 1.5;  // 设置线条宽度
                ctx.stroke();  // 绘制轨迹线
            }

            // 绘制卫星本身
            drawCircle(opts);
        };

        // 绘制圆形（地球或卫星）
        function drawCircle(opts) {
            if (opts.x !== undefined && opts.y !== undefined && opts.radius !== undefined) {
                ctx.beginPath();
                ctx.arc(opts.x, opts.y, opts.radius, 0, Math.PI * 2, true);
                if (opts.strokeStyle !== undefined) {
                    ctx.strokeStyle = opts.strokeStyle;
                    ctx.stroke();
                }
                if (opts.fillStyle !== undefined) {
                    ctx.fillStyle = opts.fillStyle;
                    ctx.fill();
                }
            }
        }
    })();

    // Physics模块，负责计算卫星运动
    (function() {
        var timestep = 1;  // 时间步长

        Physics = function() {
            return Physics;
        };

        Physics.setTimestep = function(ts) {
            timestep = ts;  // 设置时间步长
        };

        Physics.getTimestep = function() {
            return timestep;  // 获取时间步长
        };

        Physics.reCalc = function(store) {
            var collisions = [];  // 用于存储碰撞的卫星索引
            for (var i = sats.length - 1; i >= 0; i--) {
                var sat = sats[i];
                var d = (sat.x - earth.x) * (sat.x - earth.x) + (sat.y - earth.y) * (sat.y - earth.y);

                if (d <= earth.r2) {
                    collisions.push(i);  // 记录发生碰撞的卫星
                } else {
                    var theta = Math.atan2(sat.y - earth.y, sat.x - earth.x);
                    var k = -6.673E-11 * earth.m * sat.m / d;  // 引力计算公式
                    sat.u += k * Math.cos(theta) / sat.m * timestep;
                    sat.v += k * Math.sin(theta) / sat.m * timestep;

                    if (store === true) {
                        sat.xpoints.push(sat.x);  // 存储卫星轨迹
                        sat.ypoints.push(sat.y);
                        sat.colors.push(
                            Math.abs(sat.initSpeed - Math.sqrt(sat.u * sat.u + sat.v * sat.v)) < 0.1 ? "rgb(256, 256, 0)" :
                            Math.sqrt(sat.u * sat.u + sat.v * sat.v) > sat.initSpeed * 1.5 ? "rgb(256, 0, 0)" :
                            Math.sqrt(sat.u * sat.u + sat.v * sat.v) > sat.initSpeed ? "rgb(256, 128, 128)" :
                            Math.sqrt(sat.u * sat.u + sat.v * sat.v) > sat.initSpeed / 1.2 ? "rgb(64, 64, 256)" :
                            "rgb(128, 256, 256)"
                        );
                    }

                    sat.x += sat.u * timestep;  // 更新卫星位置
                    sat.y += sat.v * timestep;
                }
            }

            // 移除发生碰撞的卫星
            for (var i = collisions.length - 1; i >= 0; i--) {
                sats.splice(collisions[i], 1);
            }
        };
    })();

    // UI模块，负责用户界面交互
    (function() {
        var canvas, satMass, earthMass, initX, initY, earthMassLbl, satMassLbl, initXLbl, initYLbl, timeStepLbl, timestep;

        UI = function(opts) {
            UI.canvas = canvas = document.getElementById(opts.canvas);  // 获取画布
            satMass = document.getElementById(opts.satmass);  // 获取卫星质量输入
            earthMass = document.getElementById(opts.earthmass);  // 获取地球质量输入
            initX = document.getElementById(opts.initx);  // 获取初始X速度输入
            initY = document.getElementById(opts.inity);  // 获取初始Y速度输入
            timestep = document.getElementById(opts.timestep);  // 获取时间步长输入
            earthMassLbl = document.getElementById(opts.earthmasslbl);  // 获取地球质量标签
            timeStepLbl = document.getElementById(opts.timesteplbl);  // 获取时间步长标签
            satMassLbl = document.getElementById(opts.satmasslbl);  // 获取卫星质量标签
            initXLbl = document.getElementById(opts.initxlbl);  // 获取初始X速度标签
            initYLbl = document.getElementById(opts.initylbl);  // 获取初始Y速度标签

            earthMassLbl.innerHTML = opts.defaultearthmass;
            timeStepLbl.innerHTML = opts.defaulttimestep;
            satMassLbl.innerHTML = opts.defaultsatmass;
            initXLbl.innerHTML = opts.defaultinitx;
            initYLbl.innerHTML = opts.defaultinity;
            Physics.setTimestep(opts.defaulttimestep);  // 设置初始时间步长

            // 设置滑块事件
            $(earthMass).slider({
                slide: function(event, ui) {
                    var mass = parseFloat(ui.value);
                    earthMassLbl.innerHTML = mass;
                    orb.setEarthMass(mass);  // 更新地球质量
                },
                value: opts.defaultearthmass,
                min: 1,
                max: 100,
                step: 1
            });

            $(timestep).slider({
                slide: function(event, ui) {
                    var ts = parseFloat(ui.value);
                    timeStepLbl.innerHTML = ts;
                    Physics.setTimestep(ts);  // 更新时间步长
                },
                value: opts.defaulttimestep,
                min: 0.01,
                max: 0.1,
                step: 0.01
            });

            $(satMass).slider({
                slide: function(event, ui) {
                    var mass = parseFloat(ui.value);
                    satMassLbl.innerHTML = mass;
                },
                value: opts.defaultsatmass,
                min: 1,
                max: 30,
                step: 1
            });

            $(initX).slider({
                slide: function(event, ui) {
                    initXLbl.innerHTML = ui.value;
                },
                value: opts.defaultinitx,
                min: -3,
                max: 3,
                step: 0.5
            });

            $(initY).slider({
                slide: function(event, ui) {
                    initYLbl.innerHTML = ui.value;
                },
                value: opts.defaultinity,
                min: -3,
                max: 3,
                step: 0.5
            });

            $(UI.canvas).click(canvasClicked);  // 绑定画布点击事件
            $("#RESET_INPUT").click(function() {
                sats = [];  // 重置卫星数组
            });

            return UI;
        };

        // 画布点击事件处理函数
        function canvasClicked(e) {
            var top = 0, left = 0, obj = canvas;
            while (obj.tagName !== "BODY") {
                top += obj.offsetTop;
                left += obj.offsetLeft;
                obj = obj.offsetParent;
            }

            orb.setEarthMass(parseFloat(earthMassLbl.innerHTML));

            sats.push(new Sat({
                x: parseInt(e.clientX - left + window.pageXOffset),
                y: parseInt(e.clientY - top + window.pageYOffset),
                u: parseFloat($(initX).slider("value")),
                v: parseFloat($(initY).slider("value")),
                m: parseFloat($(satMass).slider("value")),
                color: getRandomColor()  // 设置卫星颜色
            }));
        }
    })();

    // 卫星类，表示一个卫星及其运动轨迹
    (function() {
        Sat = function(opts) {
            this.u = opts.u;
            this.v = opts.v;
            this.x = opts.x;
            this.y = opts.y;
            this.m = opts.m;
            this.initSpeed = Math.sqrt(opts.u * opts.u + opts.v * opts.v);
            this.xpoints = [];
            this.ypoints = [];
            this.colors = [];
            this.color = opts.color;  // 初始化颜色
        };

        // 绘制卫星及其轨迹
        Sat.prototype.draw = function() {
            Renderer.drawSatellite({
                x: this.x,
                y: this.y,
                radius: 3.75,
                strokeStyle: "#FFFFFF",
                fillStyle: "#FFFFFF",
                xpoints: this.xpoints,
                ypoints: this.ypoints,
                color: this.color  // 使用卫星颜色绘制轨迹
            });
        };
    })();

    // 初始化orb系统，并启动动画
    (function() {
        window.orb = orb({
            renderer: {
                earthimg: "../img/orimg/earth.png"
            },
            physics: {},
            ui: {
                canvas: "CANVAS_BOARD",
                satmass: "SAT_MASS_INPUT",
                satmasslbl: "SAT_MASS_LBL",
                earthmass: "EARTH_MASS_INPUT",
                earthmasslbl: "EARTH_MASS_LBL",
                initx: "INIT_X_INPUT",
                initxlbl: "INIT_X_LBL",
                inity: "INIT_Y_INPUT",
                initylbl: "INIT_Y_LBL",
                timesteplbl: "TIME_STEP_LBL",
                timestep: "TIME_STEP_INPUT",
                defaultsatmass: 15,
                defaultearthmass: 60,
                defaultinitx: 0,
                defaultinity: 1.5,
                defaulttimestep: 0.05
            },
            settings: {
                earth: {
                    x: 310,
                    y: 290,
                    r: 10,
                    r2: 100,
                    m: 50
                }
            }
        });

        // 定时更新并绘制
        setInterval(function() {
            Renderer.redraw();  // 重绘画面
            for (var i = 30; i > -1; i--) {
                Physics.reCalc();  // 计算物理更新
            }
            Physics.reCalc(true);  // 计算最终结果
        }, 25);

    })();

    // 生成随机颜色的函数
    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
})();
